pipeline {
    agent any
    environment {
        ZIPKIN_CONTAINER_NAME = 'zipkin'
        DOCKER_NETWORK = 'springboot-network'
    }
    stages {

//        stage('Delete Network') {
//			steps {
//				script {
//					def networkExists = sh(script: "docker network ls | grep ${DOCKER_NETWORK}", returnStatus: true) == 0
//					if (networkExists) {
//						sh """
//							docker network rm ${DOCKER_NETWORK}
//							echo "Network ${DOCKER_NETWORK} Removed successfully!"
//						"""
//					} else {
//						echo "Network ${DOCKER_NETWORK} do not exists already!"
//					}
//				}
//			}
//		}
        stage('Stop Zipkin') {
            steps {
                script {
                    // Arrêter et supprimer tout conteneur Zipkin existant
                    sh """
                        docker stop ${ZIPKIN_CONTAINER_NAME} || true
                        docker rm ${ZIPKIN_CONTAINER_NAME} || true
                    """
                }
            }
        }

//        stage('Verify Container') {
//            steps {
//                script {
//                    sh """
//                        sleep 15
//                        docker ps --filter "name=${ZIPKIN_CONTAINER_NAME}" --filter "status=running" | grep ${ZIPKIN_CONTAINER_NAME}
//                        docker logs ${ZIPKIN_CONTAINER_NAME}
//                    """
//
//					// Vérifier que Zipkin est prêt
//                    sh """
//                        for i in {1..10}; do
//                            curl -v --fail http://localhost:9411/actuator/health && break
//                            echo "Attente de l'application... (\$i/10)"
//                            sleep 5
//                        done
//                        curl -v --fail http://localhost:9411/actuator/health || exit 1
//                    """
//                }
//            }
//        }
    }
    post {
//        always {
//            sh """
//            """
//        }
        success {
            echo 'ZIPKIN arreté avec succès !'
//			echo 'network démarrée avec succès !'
        }
        failure {
            echo 'Échec d'arreter Zipkin'
        }
    }
}