pipeline {
    agent any
    environment {
        // Nom de l'image Docker
        DOCKER_IMAGE = 'jihed123/gr-conf-zipkin-client-ms3:0.0.1-SNAPSHOT'
        // Nom du conteneur
        CONTAINER_NAME = 'container-ms3'
        // Port de l'application
        APP_PORT = '1113'
        // Chemin du module Spring Boot
        MODULE_PATH = 'gr-conf-zipkin-client-ms3'
    }
    stages {
        stage('Checkout') {
            steps {
                // Récupérer le code depuis le dépôt Git
                checkout scm
            }
        }
        stage('Build Module') {
            steps {
                script {
                    // Construire uniquement le module Spring Boot
                    sh """
                        /opt/maven/bin/mvn clean package -pl ${MODULE_PATH} -am
                    """
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Construire l'image Docker à partir du Dockerfile dans le module
                    dir(MODULE_PATH) {
                        sh """
                            docker build -t ${DOCKER_IMAGE} .
                        """
                    }
                }
            }
        }
        // stage('Push Docker Image') {
            // steps {
                // script {
                    // Pousser l'image vers un registre (optionnel)
                    // docker.withRegistry('https://index.docker.io/v1/', 'docker-credentials-id') {
                        // sh """
                            // docker push ${DOCKER_IMAGE}
                        // """
                    // }
                // }
            // }
        // }
        stage('Stop and Remove Existing Container') {
            steps {
                script {
                    // Arrêter et supprimer le conteneur s'il existe
                    sh """
                        docker stop ${CONTAINER_NAME} || true
                        docker rm ${CONTAINER_NAME} || true
                    """
                }
            }
        }
        stage('Run Docker Container') {
            steps {
                script {
                    // Démarrer le conteneur
                    sh """
                        docker run -d --name ${CONTAINER_NAME} -p ${APP_PORT}:${APP_PORT} ${DOCKER_IMAGE}
                    """
                }
            }
        }
        stage('Verify Container') {
            steps {
                script {
                    // Vérifier que le conteneur est en cours d'exécution
                    sh """
                        sleep 20 # Attendre que le conteneur démarre
                        docker ps --filter "name=${CONTAINER_NAME}" --filter "status=running" | grep ${CONTAINER_NAME}
                    """
                    // Vérifier que l'application répond
                    sh """
                        curl --fail http://localhost:${APP_PORT}/ || exit 1
                    """
                }
            }
        }
    }
    post {
        success {
            echo 'Application Spring Boot démarrée avec succès !'
        }
        failure {
            echo 'Échec du démarrage de l\'application.'
            sh """
                docker stop ${CONTAINER_NAME} || true
                docker rm ${CONTAINER_NAME} || true
            """
        }
    }
}